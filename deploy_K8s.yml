---
- name: Préparer tous les nœuds
  hosts: all
  become: true
  tasks:
    - name: Mise à jour de la liste des paquets # pour que toutes les VMs soient à jour
      apt:
        update_cache: yes

    - name: Installation des paquets #nécessaires pour le fonctionnement et l'Installation de kubernetes
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
        state: present

    - name: Ajouter la clé GPG officielle de Kubernetes #essentiel pour l'ajout de kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Ajout du dépôt officiel de Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present

    - name: Installation de containerd
      apt:
        name: containerd
        state: present

    - name: Configurer containerd #ici c'est un runtime qui tourne en tache de fond pour pouvoir virtualisé un environnement c'est une obligation pour k8S
      shell: |
        mkdir -p /etc/containerd
        containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: Démarrer et activer containerd # pour s'Assurer que l'environnement de virtualisation fonctionne stop/start
      systemd:
        name: containerd
        state: started
        enabled: yes

    - name: Charger le module br_netfilter # ce module permet le trafic réseaux entre les nodes (uniquement les communication en bridge) , c'est un module du noyeau linux
      modprobe:
        name: br_netfilter
        state: present

    - name: Assurer la persistance du module br_netfilter au démarrage
      copy:
        dest: /etc/modules-load.d/br_netfilter.conf
        content: |
          br_netfilter
        owner: root
        group: root
        mode: '0644'

    - name: Désactivation du swap #Kubernetes ne fonctionne pas correctement avec le swap activé donc cette tâche le désactive.
      shell: swapoff -a && sed -i '/ swap / s/^/#/' /etc/fstab

    - name: Activer le forwarding IP
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes

    - name: Configurer net.bridge.bridge-nf-call-iptables #ici c'est plus une focntion d'iptables pour accepter les transport de communication en bridge vue que les pods/containerd communiquent en bridge
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: '1'
        state: present
        reload: yes

    - name: Installation de kubelet, kubeadm, et kubectl #Installation des composants pour l'Installation de kubernetes
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes

- name: Initialiser le cluster Kubernetes 
  hosts: masters
  become: true
  tasks:
    - name: Initialisation du cluster avec kubeadm
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Création du répertoire .kube pour root
      file:
        path: /root/.kube
        state: directory
        mode: '0755'

    - name: Copie de admin.conf dans le répertoire .kube pour root
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes
        owner: root
        group: root
        mode: '0644'

- name: Récupérer le token d'ajout des workers # ici on genere notre token avec cette commande "kubeadm token create --print-join-command" pour le fournir a notre cluster ,c'est la meilleure facon de sécurisé et d'identifié notre cluster pour qu'il soit joignable par nos autre nodes
  hosts: masters
  become: true
  tasks:
    - name: Récupérer le token d'ajout
      shell: kubeadm token create --print-join-command
      register: join_command

    - name: Enregistrer le token dans une variable accessible
      set_fact:
        join_command: "{{ join_command.stdout }}"

- name: Ajouter les nœuds workers # on execute la commande kubeadm join qui va nous permerttre de pouvoir join nos node afin de crée notre cluster pour se faire on récupeere nos token juste au dessus pour l'identification de ces derniers
  hosts: workers
  become: true
  vars:
    join_command: "{{ hostvars[groups['masters'][0]]['join_command'] }}"
  tasks:
    - name: Ajout au cluster
      shell: "{{ join_command }}"
      args:
        removes: /etc/kubernetes/kubelet.conf
